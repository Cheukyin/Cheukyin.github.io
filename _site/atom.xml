<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title>Cheukyin.blog</title>
  <link href="http://cheukyin.github.io//atom.xml" rel="self"/>
  <link href="http://cheukyin.github.io"/>
  <updated>2014-08-12T10:10:08+08:00</updated>
  <id>http://cheukyin.github.io</id>
  <author>
    <name>Cheukyin</name>
  </author>

  
  <entry>
    <title>用Python高亮org-mode代码块</title>
    <link href="http://cheukyin.github.io/python/2014-08/pygments-highlight-src-export-html.html"/>
    <updated>2014-08-10T00:00:00+08:00</updated>
    <id>http://cheukyin.github.io/python/2014-08/pygments-highlight-src-export-html</id>
    <content type="html">


1 前言



最近在研究利用org-mode写博客，其他一切都深得我心、甚合吾意，就是代码染色发布html这一点要给差评。org-mode利用 htmlize 插件给 src block 中的代码着色，让文章中的代码块输出html后的颜色于你在emacs上看到的相同。可问题在于，我emacs上背景是暗黑系的，而我博客上是浅色系，因此代码高亮风格不相调和，何况高亮主题单一不可定制，输出代码行号丑陋不堪，当然这都可以用elisp解决，可是想必是繁杂晦色无比（要调色啊&amp;#x2026;）



于是，我又再次投入万能的Python的怀抱，直接利用它的pygments库高亮代码。




...</content>
  </entry>
  
  <entry>
    <title>Blog发送ping服务请求的Python实现</title>
    <link href="http://cheukyin.github.io/jekyll/python/2014-08/ping-service.html"/>
    <updated>2014-08-04T00:00:00+08:00</updated>
    <id>http://cheukyin.github.io/jekyll/python/2014-08/ping-service</id>
    <content type="html">


1 Ping服务



近来,使用Baidu站长工具,发现有一个ping服务 ， ping 是基于 XML_RPC 标准协议的更新通告服务，用于Blog把内容更新快速通知给搜索引擎，以便搜索引擎及时进行抓取和更新。



介绍页面上的使用方法有两种，手动和自动。手动过于麻烦，不在考虑范围之内。而自动则需要Blog后台程序处理，因为我的Blog是使用Jekyll生成的静态站点，没有后台，思来想去，只好用自己最熟悉的python写个ping请求程序了。





2 XMLRPC


上文提到过， ping 是使用 XMLRPC 协议进行的，因此先来介绍下这个协议。



XMLRPC...</content>
  </entry>
  
  <entry>
    <title>用Org-Mode和Jekll写博客</title>
    <link href="http://cheukyin.github.io/jekyll/emacs/2014-08/org2jekyll.html"/>
    <updated>2014-08-01T00:00:00+08:00</updated>
    <id>http://cheukyin.github.io/jekyll/emacs/2014-08/org2jekyll</id>
    <content type="html">


1 前言



在这个月之前，我一直都是Vimmer，可是VimScript语法令人无语的混乱和棉花般的软弱无力，让我苦恼不已，可是工作学习却对其颇多依赖,始终舍之不得。
然而,就在上个月，我无意瞥了一眼我那肿胀庞杂臭长不堪的.vimrc，一眼&amp;#x2026;便失去了维护的信心，放弃Vim,自然只能转投Emacs。
经过一个月的反复折腾和深入研究后，我越加感受到神之编辑器的神圣魅力。种种以前感受到却想不到、想得到而做不到的操作方式，一一呈现。



如此神器，有如神迹!



既然长缨在手，自然要将之发挥至极至。恰逢最近打算用Jekyll生成静态站点上传至Github上搭建博客，于...</content>
  </entry>
  
  <entry>
    <title>(转载)Jekyll 扩展的 Liquid 设计</title>
    <link href="http://cheukyin.github.io/jekyll/2013-11/jekyll-liquid-designers.html"/>
    <updated>2013-11-04T00:00:00+08:00</updated>
    <id>http://cheukyin.github.io/jekyll/2013-11/jekyll-liquid-designers</id>
    <content type="html">
原文地址：https://github.com/shopify/liquid/wiki/liquid-for-designers


在Liquid中有两种类型的标记： Output 和 Tag。


Output 标记（有些可能解析文本）被包含在：
{{ 两个配对的花括号中 }}

Tag 标记（不能解析文本）被包含在:
{% 成对的花括号和百分号中 %}





Output

下面是关于输出标记的简单实例：
Hello {{name}}
Hello {{user.name}}
Hello {{ &amp;#39;tobi&amp;#39; }}

高级输入：过滤器

输入标记带有过滤器，方法很...</content>
  </entry>
  
  <entry>
    <title>(转载)给 Jekyll 添加 FancyBox</title>
    <link href="http://cheukyin.github.io/jekyll/2013-10/add-fancybox-on-jekyll.html"/>
    <updated>2013-10-15T00:00:00+08:00</updated>
    <id>http://cheukyin.github.io/jekyll/2013-10/add-fancybox-on-jekyll</id>
    <content type="html">
原文地址:http://havee.me/internet/2013-10/add-fancybox-on-jekyll.html


这是一篇介绍无 jekyll 插件的形式来使用 FancyBox。

因为既然是博客是以 Jekyll 来驱动的，那么就尽量不要在本地生成静态页面再推送到服务端，也就是说，尽量不用插件。否则，大可以用 Octopress即可。在这个前提下如何给图片一些特殊的效果呢？这里我们使用 jQuery 来实现， 譬如 FancyBox、Lightbox2。





其中有个问题，Markdown 语法中的图片我们一般是如此写法
![tag](url &amp;quot...</content>
  </entry>
  
  <entry>
    <title>(转载)CSS 的预处理器 SASS</title>
    <link href="http://cheukyin.github.io/jekyll/2013-08/convert-scss-to-css.html"/>
    <updated>2013-08-07T00:00:00+08:00</updated>
    <id>http://cheukyin.github.io/jekyll/2013-08/convert-scss-to-css</id>
    <content type="html">
原文地址:http://havee.me/internet/2013-08/convert-scss-to-css.html


最近经常接触 Jekyll，进而又认识到 Sass（从 Sass 3 开始的新语法规则被称为 SCSS，之前的语法规则为 Syntaxes） 这个 CSS 的处理器，同时 Compass 又是一个高效的开发 SASS 的利器。

闲话少说，RubyGems 下的安装
$ gem install sass
$ gem install compass



创建一个新项目
$ cd /your/jekyll/path
$ compass create .

其中...</content>
  </entry>
  
  <entry>
    <title>Markdown 语法说明</title>
    <link href="http://cheukyin.github.io/jekyll/2013-07/markdown-syntax.html"/>
    <updated>2013-07-02T00:00:00+08:00</updated>
    <id>http://cheukyin.github.io/jekyll/2013-07/markdown-syntax</id>
    <content type="html">
  概述


  宗旨
  兼容 HTML
  特殊字符自动转换

  区块元素


  段落和换行
  标题
  区块引用
  列表
  代码区块
  分隔线






  区段元素


  链接
  强调
  代码
  图片

  其它


  反斜杠
  自动链接

  感谢
  Markdown 免费编辑器






概述

宗旨

Markdown 的目标是实现「易读易写」。

可读性，无论如何，都是最重要的。一份使用 Markdown 格式撰写的文件应该可以直接以纯文本发布，并且看起来不会像是由许多标签或是格式指令所构成。Markdown 语法受到一些既有 text-t...</content>
  </entry>
  
  <entry>
    <title>Archlinux折腾记</title>
    <link href="http://cheukyin.github.io/linux/2013-02/archlinux-installation.html"/>
    <updated>2013-02-04T00:00:00+08:00</updated>
    <id>http://cheukyin.github.io/linux/2013-02/archlinux-installation</id>
    <content type="html">


1 前言



先声明一下，在下在linux方面是一无所知，毫无概念，只是在微软Windows长达十几年的熏陶下略感厌烦，再加上同学怂恿推波助澜，才会起安装Archlinux的心，却不曾想这Arch的安装界面严重违反UI设计的三条黄金原则，仅在前天看了半日linux资料的我虽有ArchWiki指导，却全无招架之功（不过据说相对于Arch，Gentoo可以用恐怖来形容，找天试试）。



不过Arch将系统的复杂性暴露于用户的做法却最能让安装者熟悉系统的结构，至少我在寻找问题根源、尝试各种解决办法的过程中确实有较强的掌控感，开始以比较底层的视角认识linux，。君不见大部分Windo...</content>
  </entry>
  
  <entry>
    <title>(转载)Git 进阶：Subtree</title>
    <link href="http://cheukyin.github.io/git/2012-07/the-git-advanced-subtree.html"/>
    <updated>2012-07-22T00:00:00+08:00</updated>
    <id>http://cheukyin.github.io/git/2012-07/the-git-advanced-subtree</id>
    <content type="html">
原文地址:http://havee.me/linux/2012-07/the-git-advanced-subtree.html


在 git 版本 1.7.9.4 中，引入了 git-subtree，基本是 用于替换 git-submodule。因为在 git-submodule 中，你只能引用别人的仓库，对于修改 git-submodule 下的子项目的代码非常麻烦，git-subtree 因此应运而生。git 官方也推荐尽量采用 git-subtree。

相比于 git-submodule 的好处是显而易见的：


管理与更新便捷
clone全新项目不在需要如 git-sub...</content>
  </entry>
  

</feed>
